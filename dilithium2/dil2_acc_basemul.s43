#include <msp430.h>

PUBLIC asm_polyvecl_pointwise_acc_montgomery          ; make the main label vissible outside this module
RSEG CODE              ; place program in 'CODE' segment


#define         mul_res0 r4
#define         mul_res1 r5
#define         mul_res2 r6
#define         mul_res3 r7

#define         forstop     r11

#define         ptr_dst     r12
#define         ptr_A1     r13
#define         ptr_A2     r14
#define         ptr_A3     r15
#define         ptr_s1     r8
#define         ptr_s2     r9
#define         ptr_s3     r10


basemul_mont      macro  q0, q1   
                       
         mov mul_res0, &MPYS32L
         mov mul_res1, &MPYS32H
         mov #0x2001, &OP2L
         mov #0x380, &OP2H    ;t = a*QINV
         
         mov &RES0, &MPYS32L
         mov &RES1, &MPYS32H
         mov q0, &OP2L
         mov q1, &OP2H         ;t*q
         
         
         sub &RES0, mul_res0
         subc &RES1, mul_res1
         subc &RES2, mul_res2
         subc &RES3, mul_res3         ; return mul_res3||mul_res2
         
         endm
         
Load_and_mul      macro   
         
         mov    0(ptr_A1), &MPYS32L              
         mov    2(ptr_A1), &MPYS32H              
                  
         mov    0(ptr_s1), &OP2L 
         mov    2(ptr_s1), &OP2H 
         
         mov    0(ptr_A2), &MACS32L
         mov    2(ptr_A2), &MACS32H
         
         mov    0(ptr_s2), &OP2L
         mov    2(ptr_s2), &OP2H
         
         mov    0(ptr_A3), &MACS32L
         mov    2(ptr_A3), &MACS32H
         
         mov    0(ptr_s3), &OP2L
         mov    2(ptr_s3), &OP2H
         
         mov    &RES0, mul_res0
         mov    &RES1, mul_res1
         mov    &RES2, mul_res2
         mov    &RES3, mul_res3
         
         endm
         
STORE     macro   
         
         mov    mul_res2, 0(ptr_dst)              
         mov    mul_res3, 2(ptr_dst)
         
         add    #4, ptr_A1
         add    #4, ptr_A2
         add    #4, ptr_A3
         add    #4, ptr_s1
         add    #4, ptr_s2
         add    #4, ptr_s3
         add    #4, ptr_dst
        
         endm
         
last_mul      macro   
         
         mov    0(ptr_A1), &MPYS32L              
         mov    2(ptr_A1), &MPYS32H              
                  
         mov    0(ptr_s1), &OP2L 
         mov    2(ptr_s1), &OP2H 
         
         mov    &RES0, mul_res0
         mov    &RES1, mul_res1
         mov    &RES2, mul_res2
         mov    &RES3, mul_res3
         
         basemul_mont   ptr_A2, ptr_s2

         mov    mul_res2, 0(ptr_dst)              
         mov    mul_res3, 2(ptr_dst)

         add    #4, ptr_A1
         add    #4, ptr_s1
         add    #4, ptr_dst
        
         endm

asm_polyvecl_pointwise_acc_montgomery:


         
         push.w r4
         push.w r5
         push.w r6
         push.w r7
         push.w r8
         push.w r9
         push.w r10
         push.w r11

         mov    SP, r4
         mov    20(r4), ptr_s1
         mov    22(r4), ptr_s2
         mov    24(r4), ptr_s3
                  
         mov    ptr_dst, forstop        ;æðË¹ ?ë³
         add    #1024, forstop
         

 
f_start:  

         Load_and_mul
         basemul_mont   #0xe001, #0x7f
         STORE
         
         cmp    forstop, ptr_dst
          jn     f_start
          
          mov    26(r4), ptr_A1         ;load for A4
          mov    28(r4), ptr_s1         ;load for s4
          mov    #0xe001, ptr_A2        ;move for Q0 
          mov    #0x7f, ptr_s2          ;move for Q1
         sub    #1024, ptr_dst          ;set for loopcount

        
last:
         
         last_mul
         cmp    forstop, ptr_dst
          jn     last


                        
         pop    r11
         pop    r10
         pop    r9
         pop    r8
         pop    r7
         pop    r6
         pop    r5
         pop    r4
         
         RETA

END

         
         
 