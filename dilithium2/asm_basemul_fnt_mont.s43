//#include <msp430.h>
//
//#define         a0              r4
//#define         a1              r5
//#define         b0              r6
//#define         b1              r7
//
//#define         zeta            r9
//#define         mul_res_lo      r10
//#define         mul_res_hi      r11
//#define         ptr_C           r12
//#define         ptr_A           r13
//#define         ptr_B           r14
//#define         ptr_zeta        r15
//
//#define         forstop         r8
//
//barrett_fnt_basemul    macro  src1, src2 
//                                                                       
//         mov src1, &MPYS32L
//         mov src2, &MPYS32H
//         mov #0x00ff, &OP2L                ;small q prime = 0x00ff 00ff
//         mov #0x00ff, &OP2H                 ;RES0~RES3¿¡ °á°ú ´ã±è
//         
//         add   #0x8000, &RES1         
//         addc  #0, &RES2
//         addc  #0, &RES3
//         
//         mov &RES2, &MPYS32L
//         mov &RES3, &MPYS32H
//         mov #257, &OP2L
//         mov #0, &OP2H                              
//         
//         sub &RES0, src1
//         subc &RES1, src2                 
//                  
//         endm
//         
//
//         
//PUBLIC asm_pointwise_fnt          ; make the main label vissible outside this module
//RSEG CODE              ; place program in 'CODE' segment
//
//asm_pointwise_fnt:
//
//         push.w r4
//         push.w r5
//         push.w r6
//         push.w r7
//         push.w r8
//         push.w r9
//         push.w r10         
//         push.w r11
//         
//                
//         mov    ptr_A, forstop
//         add    #1024, forstop
//         
//round1:         
//
//         mov    0(ptr_A), a0
//         mov    4(ptr_A), a1
//         mov    0(ptr_B), b0
//         mov    4(ptr_B), b1
//         mov    0(ptr_zeta), zeta
//         
//         ;3
//         mov    a1, &MPYS
//         mov    b0, &OP2
//         
//         mov    a0, &MACS
//         mov    b1, &OP2         
//         
//         mov    &RESLO, mul_res_lo    
//         mov    &RESHI, mul_res_hi
//         
//         barrett_fnt_basemul   mul_res_lo, mul_res_hi
//         
//         mov    mul_res_lo, 4(ptr_C)
//         mov    mul_res_hi, 6(ptr_C)
//         
//         ;1
//         mov    a1, &MPYS
//         mov    b1, &OP2
//         
//         mov    &RESLO, mul_res_lo    
//         mov    &RESHI, mul_res_hi
//         
//         barrett_fnt_basemul        mul_res_lo, mul_res_hi
//         
//         mov    mul_res_lo, &MPYS
//         mov    zeta, &OP2
//         
//         mov    a0, &MACS     
//         mov    b0, &OP2
//         
//         mov    &RESLO, mul_res_lo    
//         mov    &RESHI, mul_res_hi
//         
//         barrett_fnt_basemul        mul_res_lo, mul_res_hi
//         
//         mov    mul_res_lo, 0(ptr_C)
//         mov    mul_res_hi, 2(ptr_C)
//         ;1 end
//                          
//round2:
//         
//         mov    8(ptr_A), a0
//         mov    12(ptr_A), a1
//         mov    8(ptr_B), b0
//         mov    12(ptr_B), b1
//         inv    zeta
//         add    #1, zeta
//         
//         ;3
//         mov    a1, &MPYS
//         mov    b0, &OP2
//         
//         mov    a0, &MACS
//         mov    b1, &OP2         
//         
//         mov    &RESLO, mul_res_lo    
//         mov    &RESHI, mul_res_hi
//         
//         barrett_fnt_basemul   mul_res_lo, mul_res_hi
//         
//         mov    mul_res_lo, 12(ptr_C)
//         mov    mul_res_hi, 14(ptr_C)
//         
//         ;1
//         mov    a1, &MPYS
//         mov    b1, &OP2
//         
//         mov    &RESLO, mul_res_lo    
//         mov    &RESHI, mul_res_hi
//         
//         barrett_fnt_basemul        mul_res_lo, mul_res_hi
//         
//         mov    mul_res_lo, &MPYS
//         mov    zeta, &OP2
//         
//         mov    a0, &MACS     
//         mov    b0, &OP2
//         
//         mov    &RESLO, mul_res_lo    
//         mov    &RESHI, mul_res_hi
//         
//         barrett_fnt_basemul        mul_res_lo, mul_res_hi
//         
//         mov    mul_res_lo, 8(ptr_C)
//         mov    mul_res_hi, 10(ptr_C)
//         ;1 end
//         
//         add    #16, ptr_A
//         add    #16, ptr_B
//         add    #16, ptr_C
//         add    #2, ptr_zeta
//         
//         cmp    forstop, ptr_A
//         jn     round1
//         
//         pop    r11
//         pop    r10
//         pop    r9
//         pop    r8
//         pop    r7
//         pop    r6
//         pop    r5
//         pop    r4
//         
//         RETA
//
//
//END
//
#include <msp430.h>

#define         a0              r4
#define         a1              r5
#define         b0              r6
#define         b1              r7

#define         zeta            r9
#define         temp0           r10
#define         temp1          r11
#define         ptr_C           r12
#define         ptr_A           r13
#define         ptr_B           r14
#define         ptr_zeta        r15

#define         forstop         r8

mont_fnt_basemul    macro  src1, src2  ;input : temp1(src2)||temp0(src1)
                                                                       
         mov src1, &MPYS
         mov #-255, &OP2 //QinvR = 0xfd01 = -767
         
         mov &RESLO, &MPYS
         mov #257, &OP2
         
         sub &RESLO, src1
         subc &RESHI, src2
         
         subc src1, src1  ;return temp0||temp1
                              
         endm
         

         
PUBLIC asm_pointwise_fnt          ; make the main label vissible outside this module
RSEG CODE              ; place program in 'CODE' segment

asm_pointwise_fnt:

         push.w r4
         push.w r5
         push.w r6
         push.w r7
         push.w r8
         push.w r9
         push.w r10         
         push.w r11
         
                
         mov    ptr_A, forstop
         add    #1024, forstop
         
round1:         

         mov    0(ptr_A), a0
         mov    4(ptr_A), a1
         mov    0(ptr_B), b0
         mov    4(ptr_B), b1
         mov    0(ptr_zeta), zeta
         
         ;3
         mov    a1, &MPYS
         mov    b0, &OP2
         
         mov    a0, &MACS
         mov    b1, &OP2         
         
         mov    &RESLO, temp0    
         mov    &RESHI, temp1
         
         mont_fnt_basemul   temp0, temp1
         
         mov    temp1, 4(ptr_C)
         mov    temp0, 6(ptr_C)
         
         ;1
         mov    a1, &MPYS
         mov    b1, &OP2
         
         mov    &RESLO, temp0    
         mov    &RESHI, temp1
         
         mont_fnt_basemul        temp0, temp1
         
         mov    temp1, &MPYS
         mov    zeta, &OP2
         
         mov    a0, &MACS     
         mov    b0, &OP2
         
         mov    &RESLO, temp0    
         mov    &RESHI, temp1
         
         mont_fnt_basemul        temp0, temp1
         
         mov    temp1, 0(ptr_C)
         mov    temp0, 2(ptr_C)
         ;1 end
                          
round2:
         
         mov    8(ptr_A), a0
         mov    12(ptr_A), a1
         mov    8(ptr_B), b0
         mov    12(ptr_B), b1
         inv    zeta
         add    #1, zeta
         
         ;3
         mov    a1, &MPYS
         mov    b0, &OP2
         
         mov    a0, &MACS
         mov    b1, &OP2         
         
         mov    &RESLO, temp0    
         mov    &RESHI, temp1
         
         mont_fnt_basemul   temp0, temp1
         
         mov    temp1, 12(ptr_C)
         mov    temp0, 14(ptr_C)
         
         ;1
         mov    a1, &MPYS
         mov    b1, &OP2
         
         mov    &RESLO, temp0    
         mov    &RESHI, temp1
         
         mont_fnt_basemul        temp0, temp1
         
         mov    temp1, &MPYS
         mov    zeta, &OP2
         
         mov    a0, &MACS     
         mov    b0, &OP2
         
         mov    &RESLO, temp0    
         mov    &RESHI, temp1
         
         mont_fnt_basemul        temp0, temp1
         
         mov    temp1, 8(ptr_C)
         mov    temp0, 10(ptr_C)
         ;1 end
         
         
         add    #16, ptr_A
         add    #16, ptr_B
         add    #16, ptr_C
         add    #2, ptr_zeta
         
         cmp    forstop, ptr_A
         jn     round1
         
         pop    r11
         pop    r10
         pop    r9
         pop    r8
         pop    r7
         pop    r6
         pop    r5
         pop    r4
         
         RETA


END

