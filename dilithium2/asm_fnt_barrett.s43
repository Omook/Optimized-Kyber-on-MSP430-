#include <msp430.h>

         
         
#define         a0              r4
#define         a1              r5
#define         a2              r6
#define         a3              r7
#define         a4              r8
#define         a5              r9
#define         a6              r10
#define         a7              r11

#define         zeta1      r8
#define         zeta2      r9
#define         zeta3      r10
#define         forstop2        r11

#define         ptr                 r12
#define         temp0           r13
#define         temp1           r14
#define         ptr_zeta        r14
#define         forstop         r15         

         
barrett_fnt    macro  dst, src1, src2 
                                                                       
         mov src1, &MPYS32L
         mov src2, &MPYS32H
         mov #0x00ff, &OP2L                ;small q prime = 0x00ff 00ff
         mov #0x00ff, &OP2H                 ;RES0~RES3¿¡ °á°ú ´ã±è
         
         add   #0x8000, &RES1
         ;adc   &RES2
         ;adc   &RES3
         addc  #0, &RES2
         addc  #0, &RES3
         
         mov &RES2, &MPYS32L
         mov &RES3, &MPYS32H
         mov #257, &OP2L
         mov #0, &OP2H                              
         
         sub &RES0, src1          
         
         mov src1, dst         
                  
         endm         
         

         
shift_butterfly_fnt     macro   w0, w1

         ;mul   w1_0, w1_1, zeta0_0, zeta0_1
         ;mov    w1_0, &MPYS32L
         ;mov    w1_1, &MPYS32H
         ;mov    zeta0, &OP2L
         ;mov    &RES0, temp0
         ;mov    &RES1, temp1
         
         mov  w1, temp0         
         
         mov    w0, w1         
         
         sub    temp0, w1          ;r[j+len] = r[j] - t         
         add    temp0, w0     ;r[j]  = r[j] + t
                  
         endm      
         
butterfly_fnt     macro   w0, w1, zeta

         ;mul   w1_0, w1_1, zeta0_0, zeta0_1
         mov    w1, &MPYS         
         mov    zeta, &OP2
         mov    &RESLO, temp0
         mov    &RESHI, w1
         
         barrett_fnt    temp0, temp0, w1
                                
         mov    w0, w1         
         
         sub    temp0, w1          ;r[j+len] = r[j] - t         
         add    temp0, w0     ;r[j]  = r[j] + t
                  
         endm             
         

         
     

first_merging_3_fnt   macro   off1, off2, off3, off4, off5, off6, off7, off8

         mov    off1(ptr), a0
         mov    off2(ptr), a1
         mov    off3(ptr), a2
         mov    off4(ptr), a3
         mov    off5(ptr), a4
         mov    off6(ptr), a5
         mov    off7(ptr), a6
         mov    off8(ptr), a7
          
         ;1-layer
         rla    a4         
         rla    a4         
         rla    a4         
         rla    a4                  
         shift_butterfly_fnt     a0, a4
         
         rla    a5         
         rla    a5         
         rla    a5         
         rla    a5                  
         shift_butterfly_fnt     a1, a5
         
         rla    a6         
         rla    a6         
         rla    a6         
         rla    a6                  
         shift_butterfly_fnt     a2, a6
         
         rla    a7         
         rla    a7         
         rla    a7         
         rla    a7                  
         shift_butterfly_fnt     a3, a7
         
         ;2-layer
         
         rla    a2         
         rla    a2              
         shift_butterfly_fnt    a0, a2
         
         rla    a3         
         rla    a3              
         shift_butterfly_fnt    a1, a3
         
         rla    a6         
         rla    a6
         rla    a6         
         rla    a6
         rla    a6         
         rla    a6
         shift_butterfly_fnt    a4, a6
         
         rla    a7         
         rla    a7
         rla    a7         
         rla    a7
         rla    a7         
         rla    a7
         shift_butterfly_fnt    a5, a7
         
         
         ;3-layer               ;rla, rlc         
         ;2^1
         rla    a1                                   
         shift_butterfly_fnt    a0, a1
         
         ;2^5
         rla    a3
         rla    a3
         rla    a3
         rla    a3
         rla    a3                           
         shift_butterfly_fnt    a2, a3
         
         ;2^3
         clr    temp0
         mov    a5, temp1
         rla    temp1
         rlc    temp0   ;temp0 is msb
         clr    temp1
         sub    temp0, temp1 ; temp1 is all 1 or all 0         
         
         rla    a5
         rlc    temp1         
         rla    a5
         rlc    temp1
         rla    a5
         rlc    temp1
                  
         barrett_fnt    a5, a5, temp1
         shift_butterfly_fnt    a4, a5
         
         ;2^7
         clr    temp0
         mov    a7, temp1
         rla    temp1
         rlc    temp0   ;temp0 is msb
         clr    temp1
         sub    temp0, temp1 ; temp1 is all 1 or all 0 

         rla    a7
         rlc    temp1
         rla    a7
         rlc    temp1
         rla    a7
         rlc    temp1
         rla    a7
         rlc    temp1
         rla    a7
         rlc    temp1
         rla    a7
         rlc    temp1
         rla    a7
         rlc    temp1
         
         barrett_fnt    a7, a7, temp1
         shift_butterfly_fnt    a6, a7
         
         mov     a7, off8(ptr)
         mov     a6, off7(ptr)
         mov     a5, off6(ptr)
         mov     a4, off5(ptr)
         mov     a3, off4(ptr)
         mov     a2, off3(ptr)
         mov     a1, off2(ptr)
         mov     a0, off1(ptr)
         
         add    #4, ptr
         endm

second_merging_2_fnt   macro   off1, off2, off3, off4

         mov    off1(ptr), a0
         mov    off2(ptr), a1
         mov    off3(ptr), a2
         mov    off4(ptr), a3
                           
         ;4-layer
         
                       
         butterfly_fnt    a0, a2, zeta1
         butterfly_fnt    a1, a3, zeta1
         
         butterfly_fnt    a0, a1, zeta2
         butterfly_fnt    a2, a3, zeta3
         
                  
         mov     a3, off4(ptr)
         mov     a2, off3(ptr)
         mov     a1, off2(ptr)
         mov     a0, off1(ptr)
         
         add    #4, ptr
         endm
         

         
         
PUBLIC asm_fnt_merging       
RSEG CODE              ; place program in 'CODE' segment


        

asm_fnt_merging:
        
         push.w r4
         push.w r5
         push.w r6
         push.w r7
         push.w r8
         push.w r9
         push.w r10
         
         push.w r11
         push.w r12
         push.w r13
         push.w r14
         push.w r15
         
         push.w   r13 ;&zeta
                                            
         push.w   ptr
         mov    ptr, forstop
         add    #128, forstop
         
         
         ;layer 1~3
layer13_merge:
         
         
         first_merging_3_fnt  0, 128, 256, 384, 512, 640, 768, 896         
         cmp    forstop, ptr
         jn     layer13_merge
         
         pop    ptr
         pop   ptr_zeta
         push.w   ptr
         mov    ptr, forstop                 
         mov    ptr, forstop2
         
         add    #32, forstop
         add    #1024, forstop2                      

         ;layer 4~5
         
         
          
layer45_merge_out:         

         mov    @ptr_zeta+, zeta1
         mov    @ptr_zeta+, zeta2
         mov    @ptr_zeta+, zeta3
         

layer45_merge_in:         

         second_merging_2_fnt  0, 32, 64, 96
         cmp    forstop, ptr
         jn     layer45_merge_in
         
         add    #96, ptr
         mov    ptr, forstop
         add    #32, forstop
         
         cmp    forstop2, ptr
         jn     layer45_merge_out
         
         
         
         
         pop    ptr         
         push.w   ptr
         mov    ptr, forstop                 
         mov    ptr, forstop2
         
         add    #8, forstop
         add    #1024, forstop2      
         
layer67_merge_out:         

         mov    @ptr_zeta+, zeta1
         mov    @ptr_zeta+, zeta2
         mov    @ptr_zeta+, zeta3
         

layer67_merge_in:         

         second_merging_2_fnt  0, 8, 16, 24
         cmp    forstop, ptr
         jn     layer67_merge_in
         
         add    #24, ptr
         mov    ptr, forstop
         add    #8, forstop
         
         cmp    forstop2, ptr
         jn     layer67_merge_out
         
         
         pop ptr         
         mov    ptr, forstop
         add    #1024, forstop

final_signed:

         mov  @ptr, r4
         clr    temp0
         mov    r4, temp1
         rla    temp1
         rlc    temp0   ;temp0 is msb
         clr    temp1
         sub    temp0, temp1 ; temp1 is all 1 or all 0  
         mov    temp1, 2(ptr)
         add    #4, ptr

         cmp    forstop, ptr
         jn     final_signed



          pop    r15
          pop    r14
          pop    r13
          pop    r12
          pop    r11
          
          pop    r10
          pop    r9
          pop    r8
          pop    r7
          pop    r6
          pop    r5
          pop    r4


          RETA
          
END          
          
          
 

